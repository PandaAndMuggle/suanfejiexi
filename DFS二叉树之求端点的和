-------------------------------------------------------------------------------------
给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。
例如，从根到叶子节点路径 1->2->3 代表数字 123。
计算从根到叶子节点生成的所有数字之和。
说明: 叶子节点是指没有子节点的节点。
示例 1:
输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.
-------------------------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
---------------------------------------------------------------------------------------
import math
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        ans = []
        
        def solve(sum,root):
            if root:
                sum += root.val
                if root.right == None and root.left == None:
                    ans.append(sum)
                if root.right:
                    solve(sum*10,root.right)
                if root.left:
                    solve(sum*10,root.left)
                    
        solve(0,root)
        res = 0
        for i in ans:
            res += i
        return res
-----------------------------------------------------------------------------------------
