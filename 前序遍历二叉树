# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        res = []
        if root == None:
            return []
        res.append(root.val)
        res += self.inorderTraversal(root.left)
        res += self.inorderTraversal(root.right)
        return res
        ''' '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        if not root: return []
        stack = [root]
        res = []
        while stack:
            node = stack.pop()
            res.append(node.val)
            if node.right: stack.append(node.right)
            if node.left: stack. append(node.left)
        return res
  ------------------------------------------------------------------------------
        class Solution:
    # @param root, a tree node
    # @return a list of integers
    def preorderTraversal(self, root):
        result = []
        if root != None:
            result.append(root.val)
            left = self.preorderTraversal(root.left)
            result.extend(left)
            right = self.preorderTraversal(root.right)
            result.extend(right)
        return result
-------------------------------------------------------------------------------------------------
